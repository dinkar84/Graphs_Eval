#include <iostream>
#include <fstream>
#include <cstdlib>

using namespace std;

 int compare (int**, int, int);
 void concatenate (int**, int, int);
 void sort (int**, int);
 void unique (int**, int);
 void shift (int** p, int j, int N);



class random1

{
 int i, j, N;
 int **matrix;   //Pointer to a 2D array


 public:
        random1 (int x); 
        int put_value (int, int);
        void get_value (int, int, int);

 };


//Creating a two dimensional array for the adjacency matrix
  random1 :: random1 (int x)
  {
   N = x;
   matrix = new int *[N];
    
   for (int i=0; i<N; i++)
       {
        matrix[i] = new int [N];
        }
   }


  void random1 :: get_value (int i, int j, int value)
  {
   matrix[i][j] = value;
   }


  int random1 :: put_value (int i, int j)
  {
   return matrix[i][j];
   }


 
main()
{
  ofstream fout;
  fout.open ("rm1.txt");

 
  int nodes, value;
  cout << endl << endl << "Enter the number of nodes of the network: ";
  cin >> nodes;
 
  fout << '\n' << '\n' << "The nodes are = " << nodes;


  random1 R(nodes); //First object of class random1 constructed  

  float p;
  cout << endl << endl << "Enter the probability with which nodes should be connected: ";
  cin >> p;  
  
  fout << '\n' << '\n' << "The probability is = " << p;
  fout << '\n' << '\n';


  //Average number of nodes
  float avg = nodes*((nodes-1.0)/2.0)*p;
  int avg1 = int (avg);  
  
 
  int rec_p;
  rec_p = 1/p;
  fout << "rec_p = " << rec_p << '\n' << '\n';  

  float rand_num; 
  srand(time(0));
  
  
  int k=0, n;

  for (int i=0; i<nodes; i++)
      {
       for (int j=i+1; j<nodes; j++)
           {
            n = (k++)%rec_p; 

            float rand_num = (float) rand()/(float) RAND_MAX;

            if ((rand_num >= 0.0 + n*p) && (rand_num <= (n+1)*p))
               {
                R.get_value(i,j,1);
                }
               else
                   {
                    R.get_value(i,j,0); 
                    }
            } 
       }

      
fout << '\n' << '\n' << '\n';
  

//Printing the value of the upper right triangle matrix  
    for (int i=0; i<nodes; i++)
        {
         for (int j=i+1; j<nodes; j++)
             {
              cout << R.put_value(i,j) << "  ";
              fout.width(4); 
              fout << R.put_value(i,j) << "  ";
              } 

         cout << '\n' << '\n';
         fout << '\n' << '\n'; 
         }       



//Calculating the actual number of connections
  int num=0;

  for (int i=0; i<nodes; i++)
      {
       for (int j=i+1; j<nodes; j++)
           {
            if (R.put_value(i,j)==1)
               num+=1;
            } 
       }   


   cout << "  Expected number of connections = " << avg1 << '\n' << '\n';
   cout << endl << "  Actual number of connections = " << num << '\n';
   
   fout << "  Expected number of connections = " << avg1 << '\n' << '\n';
   fout << endl << "  Actual number of connections = " << num << '\n';



//Calculating the number of connections ('1's) in each row
   int* bound = new int [nodes];
   
   for (int i=0; i<nodes; i++)
       {
        bound[i]=0; 
        for (int j=i+1; j<nodes; j++)
            {
             if (R.put_value(i,j)==1)
                bound[i]+=1;
             } 
        } 

/*
//Printing the number of connections in each row  
   for (int i=0; i<nodes; i++)
       {
        fout << "  bound["<<i<<"] = " << bound[i] << '\n';
        }
        
   fout << '\n' << '\n' << '\n';    
*/


 
//Creating arrays to store list  
   int **list1 = new int *[nodes];

   for (int i=0; i<nodes; i++)
       {
        list1[i] = new int [bound[i]+3];   
        }                                    
                                            
 
  

//Storing the jth element having the value '1'          
   for (int i=0; i<nodes; i++)
       {
        list1[i][0]=bound[i]+1;    //First element = number of elements in the array + 1 (for row's index)
        list1[i][1]=i;             //Second element = index for counting
        list1[i][2]=i;             // Third element is the index of the row, which has been merged with the list  
        
        k=2;
        for (int j=i+1; j<nodes; j++)
            {
             if (R.put_value(i,j)==1)
                list1[i][++k]=j;       
             }
        }  

fout << '\n' << '\n' <<'\n';



//Printing the array size and jth value in each row, having the value '1'
   for (int i=0; i<nodes; i++)
       {
        for (int k= 0; k<bound[i]+3; k++)
            {
             fout.width(4); 
             fout << "  " << list1[i][k] << "  ";
             }
             fout << endl << endl;
        }



//Calculating the largest connected network

   int **list2 = new int *[nodes];

   for (int i=0; i<nodes; i++)
       {
        list2[i] = new int [bound[i]+3]; //Or [list1[i][0]+2]   
        }  
 
  
  for (int i=0; i<nodes; i++)
      {
       for (int j=0; j<list1[i][0]+2; j++)
           {
            list2[i][j] = list1[i][j];   
            }
       }

  
 
/*
fout << "  Printing the list2" << endl << endl << endl;

//Printing the array size and jth value in each row, having the value '1'
   for (int i=0; i<nodes; i++)
       {
        for (int k=0; k<bound[i]+2; k++)
            {
             fout.width(4); 
             fout << "  " << list1[i][k] << "  ";
             }
             fout << endl << endl;
        }
    
 */ 
  



//Finding the connected subgraphs
  int match, N=nodes;
 
  for (int i=0; i<N; i++)
      {
       for (int j=i+1; j<N; j++)
           {
            match = compare (list2,i,j);
           // fout << '\n' << "  Match = " << match; 
            if (match == 1)
               {
                concatenate (list2,i,j);
                sort (list2,i);
                unique (list2,i);
                shift (list2,j,N);
           //     fout << '\n' << "  i = " << i << " j = " << j << '\n';    
                j=i;   //second loop starts again from j=i+1

                --N;
                }
           }
       }
              



//Printing the connected subgraphs
   fout << '\n' << '\n' << '\n' << "  Printing the connected subgraphs" << '\n' << '\n' << '\n';

   for (int i=0; i<N; i++)
       {
        for (int j=1; j<list2[i][0]+2; j++)
            {
             fout.width(4); 
             fout << "  " << list2[i][j] << "  ";
             }
             fout << endl << endl;
        }   

   fout << endl << endl; 

   cout << '\n' << '\n'; 


}



  
//Definition for arrays' comparison
int compare (int** p, int i, int j)
 {
  int **p1;
  int a, b, flag = 0;  
  p1 = p;

 for (a=2; a<p1[i][0]+2; a++)
     {
      for (b=2; b<p1[j][0]+2; b++)
          {
           if (p1[i][a] == p1[j][b]) 
               flag = 1;
           }
       }
      return flag;
   }




//Definition for arrays' concatenation
void concatenate (int** p, int i, int j)
 {
  int **p1;
  int k, l, c, t, add;   
  p1 = p;  
  add = p1[i][0] + p1[j][0]; 
   
  int **a = new int *[1];
  a[0] = new int [add + 2]; 
  a[0][0] = add; 
  a[0][1] = i;
  
  t=2;
  for (k=2; k<p1[i][0]+2; k++)
      {
       a[0][t++] = p1[i][k];
       }


  for (l=2; l<p1[j][0]+2; l++)
      {
       a[0][t++] = p1[j][l];
       }

  p1[i] = new int [add + 2];

  
  cout << '\n' << '\n' << "add = " << add << endl; 
  for (c=0; c<a[0][0]+2; c++)  //For printing
      {
       p1[i][c] = a[0][c];
       cout << "  "  << p1[i][c];
       }
   }  




//Definition for array's sorting 
 void sort (int** p, int i)
 {
  int** p1 = p;
  int j, k, count, temp;

  for (j=2; j<p1[i][0]+2; j++) //j cannot start from 2 because the first element of jth row 
      {                        //can be smaller than that of the ith row 
       count = j;
       temp = p1[i][j]; 

       for (k=j+1; k<p1[i][0]+2; k++) 
           {
            if (temp > p1[i][k])
               {
                temp = p1[i][k];
                count = k;
                }
             }
            p1[i][count] = p1[i][j];
            p1[i][j] = temp; 
        }              
  }




//Definition for removing redundant elements in a sorted array
void unique (int** x, int i)
{
 int **a; 
 int j=0, k=0, temp;

 a = x;

 int **b = new int *[1];
 b[0] = new int [a[i][0] + 2]; 

 b[0][1] = a[i][1]; //Or = i;
 b[0][2] = a[i][2];
 temp = a[i][2];

 k=2;
 for (j=3; j<a[i][0]+2; j++) //Storing the array with unique element in temporary array b
     {
      if (temp != a[i][j])
         {
          b[0][++k] = a[i][j];
          temp = a[i][j];
          }
      } 
       b[0][0] = k-1;

 cout << endl;
 for (k=0; k<b[0][0]+2; k++) //For printing
     {
      a[i][k] = b[0][k];
      cout << "  " << a[i][k];
      }

 }
      

        

//Definition for shifting list
void shift (int** p, int j, int N)
{
 int **temp = new int *[N-j-1];
 int k,l;
 int **p1 = p;

 for (k=0; k<N-j-1; k++)  //Creating memory for temporary 2D array
     {
      temp[k] = new int [p1[k+j+1][0] + 2];
      }


 for (k=0; k<N-j-1; k++) //Storing the values of jth array to Nth array in temporary 2D array, temp 
     {
      temp[k][0] = p1[k+j+1][0];
      temp[k][1] = p1[k+j+1][1]-1; //"p1[k+j+1][1]-1" is stored in a separate column, since it changes the index of the ith row
      for (l=2; l<p1[k+j+1][0]+2; l++)
          {
           temp[k][l] = p1[k+j+1][l];        
           }
      } 


 for (k=0; k<N-j-1; k++)  //Reallocating memory for p1 from jth array to Nth array
     {
      p1[k+j] = new int [temp[k][0] + 2];  //Or = new int [p1[k+j+1][0];
      }

 for (k=0; k<N-j-1; k++)  //Storing the values of temp arrays in the corresponding arrays of p1 (list2)
     { 
      for (l=0; l<temp[k][0]+2; l++)
          {
           p1[k+j][l] = temp[k][l];
           }
      }
        
 }
    

